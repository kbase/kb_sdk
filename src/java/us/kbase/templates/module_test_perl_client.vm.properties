use strict;
use warnings;
use feature qw( say );

use Test::Most;
use Config::Simple;
use Time::HiRes qw(time);
use Bio::KBase::AuthToken;
use installed_clients::WorkspaceClient;
#if ($example)
use installed_clients::AssemblyUtilClient;
#end

require_ok "${module_name}::${module_name}Impl";

local $| = 1;
my $token        = $ENV{ 'KB_AUTH_TOKEN' };
my $config_file  = $ENV{ 'KB_DEPLOYMENT_CONFIG' };
my $callback_url = $ENV{ 'SDK_CALLBACK_URL' };

my $config       = Config::Simple->new( $config_file )->get_block( '${module_name}' );
my ( $ws_name, $ws_client );

my $scratch      = $config->{ scratch };

my $auth_token   = Bio::KBase::AuthToken->new(
    token         => $token,
    ignore_authrc => 1,
    auth_svc      => $config->{ 'auth-service-url' }
);

my $ctx = LocalCallContext->new( $token, $auth_token->user_id );
$${module_name}::${module_name}Server::CallContext = $ctx;

sub get_ws_client {

    my $ws_url  = $config->{ "workspace-url" };
    $ws_client  //= installed_clients::WorkspaceClient->new( $ws_url, token => $token );
    return $ws_client;
}

sub get_ws_name {

    $ws_client = get_ws_client();
    unless ( $ws_name ) {
        my $suffix  = int( time * 1000 );
        $ws_name    = 'test_${module_name}_' . $suffix;
        $ws_client->create_workspace( { workspace => $ws_name } );
    }
    return $ws_name;
}

my $impl;

subtest 'creating the new ${module_name}Impl object' => sub {

    lives_ok {
        $impl = ${module_name}::${module_name}Impl->new();
    } '${module_name}Impl object can be created';

    isa_ok $impl, '${module_name}::${module_name}Impl';

};

#if($example)
sub load_fasta {
    my ( $filename, $object_name, $contents ) = @_;

    open my $fh, '>', $filename
        or die "Could not open file '$filename': ${dollar_sign}!";
    print $fh $contents;
    close $fh;
    my $assycli = installed_clients::AssemblyUtilClient->new( $callback_url );
    return $assycli->save_assembly_from_fasta( {
            assembly_name  => $object_name,
            workspace_name => get_ws_name(),
            file           => { path => $filename }
    } );
}

subtest 'successful run_${module_name} run' => sub {

    # load a test FASTA file as an KBase Assembly
    my $fastaContent = ">seq1 something something asdf\n" .
                       "agcttttcat\n" .
                       ">seq2\n" .
                       "agctt\n" .
                       ">seq3\n" .
                       "agcttttcatgg";

    my $ref = load_fasta( $scratch . "/test1.fasta", "TestAssembly", $fastaContent );

    # call the implementation
    my $result = $impl->run_${module_name}( {
        workspace_name      => get_ws_name(),
        assembly_input_ref  => $ref,
        min_length          => 10,
    } );

    # validate the returned data
    cmp_ok
        $result->{ n_initial_contigs }, '==', 3,
        'correct number of initial contigs';
    cmp_ok
        $result->{ n_contigs_removed }, '==', 1,
        'correct number of removed contigs';
    cmp_ok
        $result->{ n_contigs_remaining }, '==', 2,
        'correct number of remaining contigs';

};

subtest 'run_${module_name} errors' => sub {

    throws_ok {
        $impl->run_${module_name}( {
            workspace_name      => get_ws_name(),
            assembly_input_ref  =>"fake",
            min_length          => 10,
        } );
    } qr#separators / in object reference fake#,
        'Appropriate error thrown for fake ref object';

    throws_ok {
        $impl->run_${module_name}( {
            workspace_name      => get_ws_name(),
            assembly_input_ref  => "fake",
            min_length          => -10,
        } );
    } qr/min_length parameter cannot be negative/,
        'correct error message for min length param';

    throws_ok {
        $impl->run_${module_name}( {
            workspace_name      => get_ws_name(),
            assembly_input_ref  => "fake"
        } );
    } qr/Parameter min_length is not set in input arguments/,
        'missing min_length param';

};
#else

subtest 'testing run_${module_name}' => sub {

    # Prepare test data using the appropriate uploader for that data (see the KBase function
    # catalog for help, https://narrative.kbase.us/#catalog/functions)
    # Run your method using
    # my $result = $impl->your_method( $parameters... );
    #
    # Check returned data with methods from Test::Most; e.g.
    # cmp_deeply
    #   $result,
    #   $expected,
    #   "$impl->your_method returns the expected data with params ...";

    my $result  = $impl->run_${module_name}( {
        workspace_name  => get_ws_name(),
        parameter_1     => "Hello world",
    } );

    my $expect  = {
        report_name => re('report_[0-9a-f-]+'),
        report_ref  => re('\d+\/\d+\/\d+'),
    };

    cmp_deeply
        $result,
        $expect,
        'the expected report was returned'
        or diag explain {
            got         => $result,
            expected    => $expect,
        };

};

#end

if ( $ws_name ) {
    lives_ok {
        $ws_client->delete_workspace( { workspace => $ws_name } );
    } 'Test workspace successfully deleted';
}

done_testing();

{

    package LocalCallContext;
    use strict;
    use warnings;

    sub new {
        my ( $class, $token, $user ) = @_;
        my $self = {
            token   => $token,
            user_id => $user
        };
        return bless $self, $class;
    }

    sub user_id {
        my ( $self ) = @_;
        return $self->{ user_id };
    }

    sub token {
        my ( $self ) = @_;
        return $self->{ token };
    }

    sub provenance {
        my ( $self ) = @_;
        return [ {
                'service'       => '${module_name}',
                'method'        => 'please_never_use_it_in_production',
                'method_params' => [],
            }
        ];
    }

    sub authenticated {
        return 1;
    }

    sub log_debug {
        my ( $self, $msg ) = @_;
        print STDERR $msg . "\n";
    }

    sub log_info {
        my ( $self, $msg ) = @_;
        print STDERR $msg . "\n";
    }

    1;

}
