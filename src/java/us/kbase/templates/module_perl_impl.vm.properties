package ${module_name}::${module_name}Impl;

use strict;
use warnings;

use Bio::KBase::Exceptions;
# Use Semantic Versioning (2.0.0-rc.1)
# http://semver.org
our $VERSION = '0.0.1';
our $GIT_URL = '';
our $GIT_COMMIT_HASH = '';

=head1 NAME

${module_name}

=head1 DESCRIPTION

A KBase module: ${module_name}
This sample module contains one small method that filters contigs.

=cut

#BEGIN_HEADER
use feature qw( say );
use Bio::KBase::AuthToken;
use installed_clients::KBaseReportClient;
use Config::IniFiles;
#if ($example)
use installed_clients::AssemblyUtilClient;
use Bio::SeqIO;
use Data::Dumper;
#end
#END_HEADER

sub new {
    my ( $class, @args ) = @_;
    my $self = {};
    bless $self, $class;

    #BEGIN_CONSTRUCTOR

    my $config_file         = $ENV{ KB_DEPLOYMENT_CONFIG };
    my $cfg                 = Config::IniFiles->new( -file => $config_file );
    my $scratch             = $cfg->val('${module_name}', 'scratch');
    my $callbackURL         = $ENV{ SDK_CALLBACK_URL };

    $self->{scratch}        = $scratch;
    $self->{callbackURL}    = $callbackURL;

    #END_CONSTRUCTOR

    if ( $self->can( '_init_instance' ) ) {
        $self->_init_instance();
    }
    return $self;
}

=head1 METHODS


=head2 run_${module_name}

  $output = $obj->run_${module_name}($params)

=item Description

The actual function is declared using 'funcdef' to specify the name
and input/return arguments to the function.  For all typical KBase
Apps that run in the Narrative, your function should have the
'authentication required' modifier.

=back

=cut

sub run_${module_name} {
    my $self = shift;
    my ( $params ) = @_;

    my @bad_arguments;
    ( ref( $params ) eq 'HASH' ) or push @_bad_arguments,
        "Invalid type for argument \"params\" "
        . "(value was \"$params\")";
    if ( @bad_arguments ) {
        my $msg = "Invalid arguments passed to run_${module_name}:\n"
            . join "", map { "\t$_\n" } @bad_arguments;
        Bio::KBase::Exceptions::ArgumentValidationError->throw(
            error       => $msg,
            method_name => 'run_${module_name}'
        );
    }

    my $ctx = $${module_name}::${module_name}Server::CallContext;
    my ( $output );
    #BEGIN run_${module_name}
#if ($example)
    # Print statements to stdout/stderr are captured and available as the App log
    say "Starting run_${module_name} method. Parameters: " . Dumper $params;

    # Step 1 - Parse/examine the parameters and catch any errors
    # It is important to check that parameters exist and are defined, and that nice error
    # messages are returned to users.  Parameter values go through basic validation when
    # defined in a Narrative App, but advanced users or other SDK developers can call
    # this function directly, so validation is still important.

    if ( !exists $params->{ 'workspace_name' } ) {
        die "Parameter workspace_name is not set in input arguments";
    }
    my $workspace_name = $params->{ 'workspace_name' };

    if ( !exists $params->{ 'assembly_input_ref' } ) {
        die "Parameter assembly_input_ref is not set in input arguments";
    }
    my $assy_ref = $params->{ 'assembly_input_ref' };

    if ( !exists $params->{ 'min_length' } ) {
        die "Parameter min_length is not set in input arguments";
    }
    my $min_length = $params->{ 'min_length' };
    if ( $min_length < 0 ) {
        die "min_length parameter cannot be negative (" . $min_length . ")";
    }

    # Step 2 - Download the input data as a Fasta file
    # We can use the AssemblyUtils module to download a FASTA file from our Assembly data
    # object. The return object gives us the path to the file that was created.

    say "Downloading assembly data as FASTA file.";
    my $assycli = installed_clients::AssemblyUtilClient->new( $self->{ callbackURL } );
    my $fileobj = $assycli->get_assembly_as_fasta( { ref => $assy_ref } );

    # Step 3 - Actually perform the filter operation, saving the good contigs to a new
    # fasta file.

    my $sio_in  = Bio::SeqIO->new( -file => $fileobj->{ path } );
    my $outfile = $self->{ scratch } . "/" . "filtered.fasta";
    my $sio_out = Bio::SeqIO->new( -file => ">$outfile", -format => "fasta" );
    my $total = 0;
    my $remaining = 0;
    while ( my $seq = $sio_in->next_seq ) {
        $total++;
        if ( $seq->length >= $min_length ) {
            $remaining++;
            $sio_out->write_seq( $seq );
        }
    }
    my $result_text = "Filtered assembly to " . $remaining . " contigs out of " . $total;
    say $result_text;

    # Step 4 - Save the new Assembly back to the system
    my $newref = $assycli->save_assembly_from_fasta( {
        assembly_name => $fileobj->{ assembly_name },
        workspace_name => $workspace_name,
        file           => {
            path => $outfile
        }
    } );


    # Step 5 - Build a report and return
    my $repcli = installed_clients::KBaseReportClient->new( $self->{ callbackURL } );
    my $report = $repcli->create( {
        workspace_name  => $workspace_name,
        report          => {
            text_message    => $result_text,
            objects_created => [ {
                description => "Filtered contigs",
                ref         => $newref
            } ]
        }
    } );

    # Step 6 - construct the output to send back

    $output = {
        assembly_output     => $newref,
        n_initial_contigs   => $total,
        n_contigs_remaining => $remaining,
        n_contigs_removed   => $total - $remaining,
        report_name         => $report->{ name },
        report_ref          => $report->{ ref }
    };

    say "returning: " . Dumper $output;
#else
    my $repcli = installed_clients::KBaseReportClient->new( $self->{ callbackURL } );
    my $report = $repcli->create( {
        workspace_name => $params->{ workspace_name },
        report => {
            text_message    => $params->{ parameter_1 },
            objects_created => []
        }
    } );

    my $output = {
        report_name => $report->{ name },
        report_ref  => $report->{ ref }
    };
#end
    #END run_${module_name}
    my @bad_returns;
    ( ref($output) eq 'HASH' ) or push @bad_returns,
        "Invalid type for return variable \"output\" "
        . "(value was \"$output\")";
    if ( @bad_returns ) {
        my $msg = "Invalid returns passed to run_${module_name}:\n"
            . join "", map { "\t$_\n" } @bad_returns;
        Bio::KBase::Exceptions::ArgumentValidationError->throw(
            error       => $msg,
            method_name => 'run_${module_name}'
        );
    }
    return ( $output );
}



=head2 status

  $return = $obj->status()

=over

=item Parameter and return types

=begin html

<pre>
$return is a string
</pre>

=end html

=begin text

$return is a string

=end text

=item Description

Return the module status. This is a structure including Semantic Versioning number, state and git info.

=back

=cut

sub status {
    my $return;
    #BEGIN_STATUS
    $return = {
        "state"           => "OK",
        "message"         => "",
        "version"         => $VERSION,
        "git_url"         => $GIT_URL,
        "git_commit_hash" => $GIT_COMMIT_HASH
    };
    #END_STATUS
    return ( $return );
}

1;
