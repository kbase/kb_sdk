package ${module.impl_package_name};

use strict;
use warnings;

use Bio::KBase::Exceptions;
# Use Semantic Versioning (2.0.0-rc.1)
# http://semver.org
our $VERSION = '${module.semantic_version}';
our $GIT_URL = '${module.git_url}';
our $GIT_COMMIT_HASH = '${module.git_commit_hash}';

=head1 NAME

${module.module_name}

=head1 DESCRIPTION

${module.module_doc}

=cut

#BEGIN_HEADER
${module.module_header}#END_HEADER

sub new {
    my ( $class, @args ) = @_;
    my $self = {};
    bless $self, $class;

    #BEGIN_CONSTRUCTOR
${module.module_constructor}    #END_CONSTRUCTOR

    if ( $self->can( '_init_instance' ) ) {
        $self->_init_instance();
    }
    return $self;
}

=head1 METHODS

#set( $status_in_kidl = false )
#foreach( $method in $module.methods )
#if( ${method.name} == "status" )
#set( $status_in_kidl = true )
#end

=head2 ${method.name}

  #if( "$method.ret_vars" != "" )${method.ret_vars} = #{end}$obj->${method.name}(${method.arg_vars})

=over

=item Parameter and return types

=begin html

<pre>
#foreach( $docline in $method.arg_doc )
${docline}
#end

</pre>

=end html

=begin text

#foreach( $docline in $method.arg_doc )
${docline}
#end


=end text


=item Description

${method.doc}

=back

=cut

sub ${method.name} {
    my $self = shift;
#if( $method.arg_count > 0 )
    my ( ${method.arg_vars} ) = @_;

    my @bad_arguments;
#foreach( $param in $method.params )
    ( ${param.validator} ) or push @bad_arguments,
        "Invalid type for argument \"${param.name}\" "
        . "(value was \"${param.perl_var}\")";
#end
    if ( @bad_arguments ) {
        my $msg = "Invalid arguments passed to ${method.name}:\n"
            . join "", map { "\t$_\n" } @bad_arguments;
        Bio::KBase::Exceptions::ArgumentValidationError->throw(
            error       => $msg,
            method_name => '${method.name}'
        );
    }
#end

    my $ctx = $${server_package_name}::CallContext;
#if( $method.ret_count > 0 )
    my ( ${method.ret_vars} );
#end
    #BEGIN ${method.name}
${method.user_code}    #${empty_escaper}END ${method.name}
#if( $method.ret_count > 0 )
    my @bad_returns;
#foreach( $return in $method.returns )
    ( ${return.validator} ) or push @bad_returns,
        "Invalid type for return variable \"${return.name}\" "
        . "(value was \"${return.perl_var}\")";
#end
    if ( @bad_returns ) {
        my $msg = "Invalid returns passed to ${method.name}:\n"
            . join "", map { "\t$_\n" } @bad_returns;
        Bio::KBase::Exceptions::ArgumentValidationError->throw(
            error       => $msg,
            method_name => '${method.name}'
        );
    }
#end
    return ( ${method.ret_vars} );
}


#end

#if( !$status_in_kidl )

=head2 status

  $return = $obj->status()

=over

=item Parameter and return types

=begin html

<pre>
$return is a string
</pre>

=end html

=begin text

$return is a string

=end text

=item Description

Return the module status. This is a structure including Semantic Versioning number, state and git info.

=back

=cut

sub status {
    my $return;
    #BEGIN_STATUS
#if( ${module.module_status} )
${module.module_status}
#else
    $return = {
        "state"           => "OK",
        "message"         => "",
        "version"         => $VERSION,
        "git_url"         => $GIT_URL,
        "git_commit_hash" => $GIT_COMMIT_HASH
    };
#end
    #END_STATUS
    return ( $return );
}
#end

=head1 TYPES

#foreach( $type in $module.types )

=head2 ${type.name}

=over

#if( $type.comment && "$type.comment" != "" )

=item Description

${type.comment}
#end

=item Definition

=begin html

<pre>
${type.english}
</pre>

=end html

=begin text

${type.english}

=end text

=back

#end

=cut

1;
