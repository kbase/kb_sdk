#[[############################################################]]#
#
# Autogenerated by the KBase type compiler -
# any changes made here will be overwritten
#
#[[############################################################]]#

from __future__ import print_function
# the following is a hack to get the baseclient to import whether we're in a
# package or not. This makes pep8 unhappy hence the annotations.
try:
    # baseclient and this client are in a package
    from .baseclient import BaseClient as _BaseClient  # @UnusedImport
except:
    # no they aren't
    from baseclient import BaseClient as _BaseClient  # @Reimport
#if( $any_async || $async_version )
import time
#end
#foreach( $module in $modules )


class ${module.module_name}(object):

    def __init__(
            self, url=None, timeout=30 * 60, user_id=None,
            password=None, token=None, ignore_authrc=False,
            trust_all_ssl_certificates=False,
            auth_svc='https://kbase.us/services/authorization/Sessions/Login'#if($any_async || $async_version || $dynserv_ver),
            service_ver=#if($service_ver)'$service_ver'#{else}None#{end}#if($any_async || $async_version),
            async_job_check_time_ms=5000#{end}#{end}):
        if url is None:
#if( $default_service_url )
            url = '${default_service_url}'
#else
            raise ValueError('A url is required')
#end
#if($any_async || $async_version || $dynserv_ver)
        self._service_ver = service_ver
#else
        self._service_ver = None
#end
        self._client = _BaseClient(
            url, timeout=timeout, user_id=user_id, password=password,
            token=token, ignore_authrc=ignore_authrc,
            trust_all_ssl_certificates=trust_all_ssl_certificates,
            auth_svc=auth_svc#if($any_async || $async_version),
            async_job_check_time_ms=async_job_check_time_ms#{end}#if($dynserv_ver),
            lookup_url=True#{end})
#if($any_async || $async_version)

    def _check_job(self, job_id):
        return self._client._check_job('${module.module_name}', job_id)
#end
#foreach($method in $module.methods)
#set($comma_args = "#if($method.arg_count>0), ${method.args}#{else}#{end}")
#if($method.async || $async_version)

    def _${method.name}_submit(self${comma_args}, context=None):
        return self._client._submit_job(
             '${module.module_name}.${method.name}', [${method.args}],
             self._service_ver, context)

    def ${method.name}(self${comma_args}, context=None):
#if( $method.py_doc_lines.size() > 0 )
        """
#foreach( $docline in $method.py_doc_lines )
        ${docline}
#end
        """
#end
        job_id = self._${method.name}_submit(${method.args}#if($method.arg_count>0), #{end}context)
        while True:
            time.sleep(self._client.async_job_check_time)
            job_state = self._check_job(job_id)
            if job_state['finished']:
#if( $method.ret_count == 1 )
                return job_state['result'][0]
#elseif( $method.ret_count > 1 )
                return job_state['result']
#else
                return
#end
#else## of if-async

    def ${method.name}(self${comma_args}, context=None):
#if( $method.py_doc_lines.size() > 0 )
        """
#foreach( $docline in $method.py_doc_lines )
        ${docline}
#end
        """
#end
        return self._client.call_method(
            '${module.module_name}.${method.name}',
            [${method.args}], self._service_ver, context)
#end## of if-async
#end
#end