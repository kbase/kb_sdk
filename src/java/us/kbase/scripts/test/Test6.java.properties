package us.kbase.test6;

import java.net.URL;

import us.kbase.auth.AuthToken;
import us.kbase.common.service.UnauthorizedException;
import us.kbase.common.service.ServerException;
import us.kbase.test6.authtest.AuthTestClient;

import junit.framework.Assert;

public class Test6 {
	
	public Test6(AuthTestClient client, Integer port) throws Exception {
		client = new AuthTestClient();
		client.setIsInsecureHttpConnectionAllowed(true);
		try {
			client.callWithAuth("");
			Assert.fail("Method shouldn't work because it requires authentication");
		} catch (UnauthorizedException ex) {
			Assert.assertEquals("RPC method requires authentication but credentials were not provided", ex.getMessage());
		}
		Assert.assertEquals("0", client.callWithOptAuth("0"));
		String user = System.getProperty("test.user");
		String pwd = System.getProperty("test.pwd");
		client = new AuthTestClient(new URL("http://localhost:" + port), user, pwd);
		client.setIsInsecureHttpConnectionAllowed(true);
		Assert.assertEquals("1", client.callWithAuth("1"));
		Assert.assertEquals("2", client.callWithOptAuth("2"));
		client = new AuthTestClient(user, pwd);
		client.setIsInsecureHttpConnectionAllowed(true);		
		Assert.assertEquals("1", client.callWithAuth("1"));
		Assert.assertEquals("2", client.callWithOptAuth("2"));
		AuthToken badtoken = new AuthToken("kbasetest", "un=kbasetest|tokenid=e9e3e712-0940-11e3-93e1-1251391ccf32|expiry=1408502015|client_id=kbasetest|token_type=Bearer|SigningSubject=https://nexus.api.globusonline.org/goauth/keys/eb22b04a-0940-11e3-93e1-1251391ccf32|sig=7c5b6c67a8a6a4b04f950796e9b47d222d2dba891f2c1bb639363adfb1f052424c65e1e180a7b0ddc1ba38da9f9921f5011e7d7cbde2a05642a80efeae44e449f5812f6f10b9d25fb51d7dbe1b2418ec97600952666ae06e6d455dce5f1bf3a93e210f84d9b3267182832bcf5d8fe57e8e40cc42b8e76a7b62525b25f82ef4e7");
		try {
			client = new AuthTestClient(new URL("http://localhost:" + port), badtoken);
			client.setIsInsecureHttpConnectionAllowed(true);
			client.callWithAuth("");
			Assert.fail("Method shouldn't work because authentication should fail on server side");
		} catch (ServerException ex) {
			Assert.assertTrue(ex.getMessage().contains("Token validation failed"));
		}
		try {
			client = new AuthTestClient(badtoken);
			client.setIsInsecureHttpConnectionAllowed(true);
			client.callWithAuth("");
			Assert.fail("Method shouldn't work because authentication should fail on server side");
		} catch (ServerException ex) {
			Assert.assertTrue(ex.getMessage().contains("Token validation failed"));
		}
	}
}