package us.kbase.test16;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import us.kbase.auth.AuthService;
import us.kbase.auth.AuthToken;
import us.kbase.common.service.JsonClientException;
import us.kbase.common.service.ServerException;
import us.kbase.common.service.UObject;
import us.kbase.test16.missingmethoderrors.MissingMethodErrorsClient;

import junit.framework.Assert;

public class Test16 {
	
	public Test16(MissingMethodErrorsClient client, Integer port) throws Exception {
        URL url = new URL("http://localhost:" + port);
        String user = System.getProperty("test.user");
        String pwd = System.getProperty("test.pwd");
        AuthToken token = AuthService.login(user, new String(pwd)).getToken();
	    String val1 = "Any text";
        try {
            String ret = unknownMethod(url, val1);
            Assert.fail("Method shouldn't work because it doesn't exist");
        } catch (ServerException ex) {
            Assert.assertTrue(ex.getMessage(), ex.getName().equals("Method not found") || 
                    (ex.getMessage().contains("unknown_method") && 
                     (ex.getMessage().contains(" is not a valid method") || 
                      ex.getMessage().contains("Can not find method"))));
        }
	}
	
    public static String unknownMethod(URL serviceUrl, String arg1) throws IOException, JsonClientException {
        List<Object> args = new ArrayList<Object>();
        args.add(arg1);
        TypeReference<List<String>> retType = new TypeReference<List<String>>() {};
        List<String> res = jsonrpcCall(serviceUrl, null, "MissingMethodErrors.unknown_method", args, retType);
        return res.get(0);
    }
    
    public static <ARG, RET> RET jsonrpcCall(URL serviceUrl, AuthToken accessToken, String method, 
            ARG arg, TypeReference<RET> cls) throws IOException, JsonClientException {
        HttpURLConnection conn = (HttpURLConnection) serviceUrl.openConnection();
        conn.setConnectTimeout(10000);
        conn.setReadTimeout(30 * 60 * 1000);
        conn.setDoOutput(true);
        conn.setRequestMethod("POST");
        if (accessToken != null)
            conn.setRequestProperty("Authorization", accessToken.toString());
        String id = ("" + Math.random()).replace(".", "");
        // Write real data into http output stream
        ObjectMapper mapper = UObject.getMapper();
        OutputStream os = conn.getOutputStream();
        JsonGenerator g = mapper.getFactory().createGenerator(os, JsonEncoding.UTF8);
        g.writeStartObject();
        g.writeObjectField("params", arg);
        g.writeStringField("method", method);
        g.writeStringField("version", "1.1");
        g.writeStringField("id", id);
        g.writeEndObject();
        g.close();
        os.flush();
        // Read response
        int code = conn.getResponseCode();
        conn.getResponseMessage();
        InputStream istream;
        if (code == 500) {
            istream = conn.getErrorStream();
        } else {
            istream = conn.getInputStream();
        }
        // Parse response into json
        ByteArrayOutputStream bufferOs = new ByteArrayOutputStream();
        byte[] buffer = new byte[1024];
        int length;
        while ((length = istream.read(buffer)) > 0) {
            bufferOs.write(buffer, 0, length);
        }
        bufferOs.close();
        buffer = bufferOs.toByteArray();
        JsonParser jp = mapper.getFactory().createParser(new ByteArrayInputStream(buffer));
        if (JsonToken.START_OBJECT != jp.nextToken()) {
            throw new JsonClientException("Server response has wrong format:\n" + 
                    new String(buffer));
        }
        Map<String, String> retError = null;
        RET res = null;
        while (jp.nextToken() != JsonToken.END_OBJECT) {
            //checkToken(JsonToken.FIELD_NAME, jp.getCurrentToken());
            String fieldName = jp.getCurrentName();
            if (fieldName.equals("error")) {
                jp.nextToken();
                retError = jp.getCodec().readValue(jp, new TypeReference<Map<String, String>>(){});
            } else if (fieldName.equals("result")) {
                if (code == 500) {
                    throw new JsonClientException("Server response contains result but has error code 500, " +
                            "response header is:\n" + new String(buffer));
                }
                jp.nextToken();
                try {
                    res = jp.getCodec().readValue(jp, cls);
                } catch (JsonParseException e) {
                    throw new JsonClientException("Parse error while parsing response in: " +
                            new String(buffer), e);
                }
            } else {
                jp.nextToken();
                jp.getCodec().readValue(jp, Object.class);
            }
        }
        if (retError != null) {
            String data = retError.get("data") == null ? retError.get("error") : retError.get("data");
            throw new ServerException(retError.get("message"),
                    new Integer(retError.get("code")), retError.get("name"),
                    data);
        }
        if (res == null)
            throw new ServerException("An unknown server error occured", 0, "Unknown", null);
        return res;
    }
}