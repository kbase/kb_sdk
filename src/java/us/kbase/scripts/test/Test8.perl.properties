package StoringImpl;

use strict;
use warnings;

use Bio::KBase::Exceptions;
# Use Semantic Versioning (2.0.0-rc.1)
# http://semver.org
our $VERSION = "0.1.0";

=head1 NAME

Storing

=head1 DESCRIPTION



=cut

#BEGIN_HEADER
#
# Header comment.
#
#END_HEADER

sub new
{
    my($class, @args) = @_;
    my $self = {
    };
    bless $self, $class;
    #BEGIN_CONSTRUCTOR
    self->myValue = -1;
    #END_CONSTRUCTOR

    if ($self->can('_init_instance'))
    {
    $self->_init_instance();
    }
    return $self;
}

=head1 METHODS



=head2 m1

  $obj->m1()

=over 4

=item Parameter and return types

=begin html

<pre>

</pre>

=end html

=begin text



=end text



=item Description



=back

=cut

sub m1
{
    my $self = shift;

    my $ctx = $StoringServer::CallContext;
    #BEGIN m1
    self->myValue = 1;
    #END m1
    return();
}




=head2 m2

  $obj->m2()

=over 4

=item Parameter and return types

=begin html

<pre>

</pre>

=end html

=begin text



=end text



=item Description



=back

=cut

sub m2
{
    my $self = shift;

    my $ctx = $StoringServer::CallContext;
    #BEGIN m2
    self->myValue = 2;
    #END m2
    return();
}




=head2 m1second

  $obj->m1second()

=over 4

=item Parameter and return types

=begin html

<pre>

</pre>

=end html

=begin text



=end text



=item Description



=back

=cut

sub m1second
{
    my $self = shift;

    my $ctx = $StoringServer::CallContext;
    #BEGIN m1second
    self->myValue = 3;
    #END m1second
    return();
}




=head2 m2second

  $obj->m2second()

=over 4

=item Parameter and return types

=begin html

<pre>

</pre>

=end html

=begin text



=end text



=item Description



=back

=cut

sub m2second
{
    my $self = shift;

    my $ctx = $StoringServer::CallContext;
    #BEGIN m2second
    self->myValue = 4;
    #END m2second
    return();
}




=head2 version

  $return = $obj->version()

=over 4

=item Parameter and return types

=begin html

<pre>
$return is a string
</pre>

=end html

=begin text

$return is a string

=end text

=item Description

Return the module version. This is a Semantic Versioning number.

=back

=cut

sub version {
    return $VERSION;
}

=head1 TYPES



=cut

1;
